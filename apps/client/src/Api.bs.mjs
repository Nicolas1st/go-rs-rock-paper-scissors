// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "./Env.bs.mjs";
import * as Game from "./entities/Game.bs.mjs";
import * as Undici from "undici";
import * as Nickname from "./entities/Nickname.bs.mjs";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as S$RescriptSchema from "rescript-schema/src/S.bs.mjs";

function make(path, method, inputSchema, dataSchema) {
  return function (input) {
    var jsonString = S$RescriptSchema.serializeToJsonStringWith(input, inputSchema, undefined);
    var tmp;
    tmp = jsonString.TAG === "Ok" ? jsonString._0 : S$RescriptSchema.$$Error.raise(jsonString._0);
    var options = {
      method: method,
      body: tmp
    };
    return Undici.request(Env.apiUrl + path, options).then(function (response) {
                  var contentLength = Core__Option.getOr(Core__Option.flatMap(response.headers["content-length"], (function (__x) {
                              return Core__Int.fromString(__x, undefined);
                            })), 0);
                  if (contentLength === 0) {
                    return Promise.resolve(undefined);
                  } else {
                    return response.body.json();
                  }
                }).then(function (unknown) {
                return S$RescriptSchema.parseAnyOrRaiseWith(unknown, dataSchema);
              });
  };
}

var nickname = S$RescriptSchema.transform(S$RescriptSchema.string, (function (s) {
        return {
                p: (function (string) {
                    var nickname = Nickname.fromString(string);
                    if (nickname !== undefined) {
                      return Caml_option.valFromOption(nickname);
                    } else {
                      return s.fail("Invalid nickname. (" + string + ")", undefined);
                    }
                  }),
                s: Nickname.toString
              };
      }));

var code = S$RescriptSchema.transform(S$RescriptSchema.$$int, (function (s) {
        return {
                p: (function ($$int) {
                    var gameCode = Game.Code.fromString($$int.toString());
                    if (gameCode !== undefined) {
                      return Caml_option.valFromOption(gameCode);
                    } else {
                      return s.fail("Invalid game code. (" + $$int + ")", undefined);
                    }
                  }),
                s: (function (value) {
                    var $$int = Core__Int.fromString(Game.Code.toString(value), undefined);
                    if ($$int !== undefined) {
                      return $$int;
                    } else {
                      return s.fail("Invalid game code.", undefined);
                    }
                  })
              };
      }));

var move = S$RescriptSchema.union([
      S$RescriptSchema.variant(S$RescriptSchema.literal("rock"), (function (param) {
              return "Rock";
            })),
      S$RescriptSchema.variant(S$RescriptSchema.literal("paper"), (function (param) {
              return "Paper";
            })),
      S$RescriptSchema.variant(S$RescriptSchema.literal("scissors"), (function (param) {
              return "Scissors";
            }))
    ]);

var outcome = S$RescriptSchema.union([
      S$RescriptSchema.variant(S$RescriptSchema.literal("win"), (function (param) {
              return "Win";
            })),
      S$RescriptSchema.variant(S$RescriptSchema.literal("draw"), (function (param) {
              return "Draw";
            })),
      S$RescriptSchema.variant(S$RescriptSchema.literal("loss"), (function (param) {
              return "Loss";
            }))
    ]);

function make$1() {
  return make("/game", "POST", S$RescriptSchema.object(function (s) {
                  return {
                          nickname: s.f("userName", nickname)
                        };
                }), S$RescriptSchema.object(function (s) {
                  return {
                          gameCode: s.f("gameCode", code)
                        };
                }));
}

var CreateGame = {
  make: make$1
};

function make$2() {
  return make("/game/connection", "POST", S$RescriptSchema.object(function (s) {
                  return {
                          nickname: s.f("userName", nickname),
                          gameCode: s.f("gameCode", code)
                        };
                }), S$RescriptSchema.unit);
}

var JoinGame = {
  make: make$2
};

function make$3() {
  return make("/game/status", "POST", S$RescriptSchema.object(function (s) {
                  return {
                          nickname: s.f("userName", nickname),
                          gameCode: s.f("gameCode", code)
                        };
                }), S$RescriptSchema.union([
                  S$RescriptSchema.object(function (s) {
                        s.tag("status", "waiting");
                        return "WaitingForOpponentJoin";
                      }),
                  S$RescriptSchema.object(function (s) {
                        s.tag("status", "inProcess");
                        return "InProgress";
                      }),
                  S$RescriptSchema.object(function (s) {
                        s.tag("status", "finished");
                        return s.f("gameResult", S$RescriptSchema.object(function (s) {
                                        return {
                                                TAG: "Finished",
                                                _0: {
                                                  outcome: s.f("outcome", outcome),
                                                  yourMove: s.f("yourMove", move),
                                                  opponentsMove: s.f("opponentsMove", move)
                                                }
                                              };
                                      }));
                      })
                ]));
}

var RequestGameStatus = {
  make: make$3
};

function make$4() {
  return make("/game/move", "POST", S$RescriptSchema.object(function (s) {
                  return {
                          nickname: s.f("userName", nickname),
                          gameCode: s.f("gameCode", code),
                          yourMove: s.f("move", move)
                        };
                }), S$RescriptSchema.unit);
}

var SendMove = {
  make: make$4
};

export {
  CreateGame ,
  JoinGame ,
  RequestGameStatus ,
  SendMove ,
}
/* nickname Not a pure module */
